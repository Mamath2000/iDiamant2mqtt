const logger = require('./utils/logger');
const config = require('./config/config');
const IDiamantClient = require('./services/idiamant-client');
const MQTTClient = require('./services/mqtt-client');
const ShutterController = require('./controllers/shutter-controller');

class App {
  constructor() {
    this.idiamantClient = null;
    this.mqttClient = null;
    this.shutterController = null;
    this.isRunning = false;
  }

  async start() {
    try {
      logger.info('üöÄ D√©marrage de iDiamant2MQTT...');
      
      // V√©rification de la configuration
      this.validateConfig();
      
      // Initialisation des clients
      await this.initializeClients();
      
      // D√©marrage du contr√¥leur de volets
      await this.initializeShutterController();
      
      this.isRunning = true;
      logger.info('‚úÖ iDiamant2MQTT d√©marr√© avec succ√®s !');
      
      // Gestion propre de l'arr√™t
      this.setupGracefulShutdown();
      
    } catch (error) {
      logger.error('‚ùå Erreur lors du d√©marrage:', error);
      process.exit(1);
    }
  }

  validateConfig() {
    const requiredFields = ['IDIAMANT_API_URL', 'MQTT_BROKER_URL'];
    const missingFields = requiredFields.filter(field => !config[field]);
    
    if (missingFields.length > 0) {
      throw new Error(`Configuration manquante: ${missingFields.join(', ')}`);
    }
    
    logger.info('‚úÖ Configuration valid√©e');
  }

  async initializeClients() {
    // Client iDiamant
    this.idiamantClient = new IDiamantClient(config);
    await this.idiamantClient.connect();
    logger.info('‚úÖ Client iDiamant connect√©');

    // Client MQTT
    this.mqttClient = new MQTTClient(config);
    await this.mqttClient.connect();
    logger.info('‚úÖ Client MQTT connect√©');
  }

  async initializeShutterController() {
    this.shutterController = new ShutterController(
      this.idiamantClient,
      this.mqttClient,
      config
    );
    
    await this.shutterController.start();
    logger.info('‚úÖ Contr√¥leur de volets initialis√©');
  }

  setupGracefulShutdown() {
    const shutdown = async (signal) => {
      logger.info(`üì° Signal ${signal} re√ßu. Arr√™t en cours...`);
      
      if (this.isRunning) {
        this.isRunning = false;
        
        try {
          if (this.shutterController) {
            await this.shutterController.stop();
          }
          
          if (this.mqttClient) {
            await this.mqttClient.disconnect();
          }
          
          if (this.idiamantClient) {
            await this.idiamantClient.disconnect();
          }
          
          logger.info('üëã Arr√™t propre termin√©');
          process.exit(0);
        } catch (error) {
          logger.error('‚ùå Erreur lors de l\'arr√™t:', error);
          process.exit(1);
        }
      }
    };

    process.on('SIGINT', () => shutdown('SIGINT'));
    process.on('SIGTERM', () => shutdown('SIGTERM'));
    
    process.on('uncaughtException', (error) => {
      logger.error('‚ùå Exception non g√©r√©e:', error);
      process.exit(1);
    });
    
    process.on('unhandledRejection', (reason) => {
      logger.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
      process.exit(1);
    });
  }
}

// D√©marrage de l'application
if (require.main === module) {
  const app = new App();
  app.start();
}

module.exports = App;
